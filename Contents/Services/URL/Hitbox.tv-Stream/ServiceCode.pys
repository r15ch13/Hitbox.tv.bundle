"""
Hitbox.tv Plugin

@author Richard Kuhnt (r15ch13)
@link https://github.com/r15ch13/Hitbox.tv.bundle
@license MIT License (http://r15ch13.mit-license.org/)
"""

from datetime import date
from dateutil.parser import parse
import urllib2
import urllib2_new

HITBOX_MEDIA_URL  = "https://api.hitbox.tv/media/live/%s"
HITBOX_STATIC_URL = "https://edge.sf.hitbox.tv"
HITBOX_HLS_URL = "https://api.hitbox.tv/player/hls/%s.m3u8"

####################################################################################################
def NormalizeURL(url):

    return url.split('?')[0].split('#')[0].rstrip('/')

####################################################################################################
def MetadataObjectForURL(url):

    user_id = GetUserId(url)
    json = JSON.ObjectFromURL(HITBOX_MEDIA_URL % user_id, cacheTime=0)

    if 'livestream' not in json or json['livestream'] is None or len(json['livestream']) is 0:
        raise Ex.LiveMediaNotStarted

    media = json['livestream'][-1]

    display_name = media['media_display_name']
    game = media['category_name']
    status = media['media_status']
    viewers = media['media_views']

    thumb = ""
    if media['media_thumbnail'] is not None:
        thumb = HITBOX_STATIC_URL + media['media_thumbnail']

    art = ""
    if media['media_bg_image'] is not None:
        art = HITBOX_STATIC_URL + media['media_bg_image']

    originally_available_at = parse(media['media_live_since'])

    return VideoClipObject(
        title = '%s - %s' % (display_name, game),
        summary = '%s\n\n%s Viewers' % (status, viewers),
        thumb = Resource.ContentsOfURLWithFallback(thumb),
        genres = [game],
        art = Resource.ContentsOfURLWithFallback(art),
        year = date.today().year,
        originally_available_at = originally_available_at,
    )

####################################################################################################
def MediaObjectsForURL(url):

    return [
        MediaObject(
            protocol = 'hls',
            container = 'mpegts',
            video_codec = VideoCodec.H264,
            video_resolution = 720,
            audio_codec = AudioCodec.AAC,
            audio_channels = 2,
            optimized_for_streaming = True,
            parts = [
                PartObject(
                    key = Callback(PlayVideo, url=url)
                )
            ]
        )
    ]

####################################################################################################
@indirect
def PlayVideo(url):

    user_id = GetUserId(url)

    playlistUrl = HITBOX_HLS_URL % user_id

    Log("Hitbox HLS: %s" % playlistUrl)

    return IndirectResponse(VideoClipObject, key=HTTPLiveStreamURL(playlistUrl))

####################################################################################################
def GetUserId(url):

    return url.split('/')[-1]

####################################################################################################
def TestURLs():

    testUrls = []

    try:
        json = JSON.ObjectFromURL("https://api.hitbox.tv/media/live/list?limit=3")
    except(urllib2.HTTPError, urllib2_new.HTTPError, ValueError), err:
        return MessageContainer(NAME, L("No live streams found."))

    for stream in json['livestream']:
        testUrls.append(stream['channel']['channel_link'])

    return testUrls